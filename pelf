#!/bin/ash

# IDGAFPL License
LICENSE="\
(C) 2016 My2ndAngelic. (Author of the LICENSE)

I don't give a fuck about how this will be used. Everything will be 
allowed, including changing the name, citing wrongly, claiming owner
ship and destroying the computer. You are allowed to do anything wit
h this as long as:

0. I don't give a fuck.
1. You agree that you don't give a fuck.
2. You agree that your use of this will have nothing to fuck with me
 now and in the future.
3. You don't fuck me legally/illegally.

As long as you agree with these terms, you are free to do fucking an
ything, whether legal or not legal in your country, because I don't 
give a fuck. If you don't agree with my terms, fuck off.

Author of the program: chatGPT(lead developer) & xplshn(main cuck)
"

# Check if the required arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <ELF_SRC_PATH> <DST_PATH> [--add-library <LIB_PATH>] [--add-binary <BIN_PATH>] [--add-arbitrary <ARBITRARY_PATH>]" >&2
    exit 1
fi

src="$1"
dst="$2"

# Create a temporary directory for bundling the files
tmp_dir="/tmp/pelf_$(date '+%s%M%S')_$RANDOM"
mkdir -p "$tmp_dir/bin" "$tmp_dir/libs" || exit 1
trap 'rm -rf "$tmp_dir"' EXIT

# Function to handle adding libraries
add_library() {
    lib="$1"
    cp -L "$lib" "$tmp_dir/libs" || exit 1
}

# Function to handle adding binaries
add_binary() {
    binary="$1"
    cp -L "$binary" "$tmp_dir/bin/$(basename "$binary")" || exit 1
}

# Function to handle adding arbitrary files/directories
add_arbitrary() {
    arbitrary="$1"
    mkdir -p "$tmp_dir/$(dirname "${arbitrary#/}")" || exit 1
    cp -LR "$arbitrary" "$tmp_dir/$(dirname "${arbitrary#/}")" || exit 1
}

shift 2 # To access --(add)itional arguments

# Process the optional arguments --add-library, --add-binary, and --add-arbitrary
while [ "$#" -gt 0 ]; do
    case "$1" in
        --add-library)
            add_library "$2"
            shift 2
            ;;
        --add-binary)
            add_binary "$2"
            shift 2
            ;;
        --add-arbitrary)
            add_arbitrary "$2"
            shift 2
            ;;
        *)
            echo "Invalid argument: $1" >&2
            exit 1
            ;;
    esac
done

# Copy the executable to the temporary directory
cp -L "$src" "$tmp_dir/bin" || exit 1

# Copy the libraries from the executable to the temporary directory
libs=$(ldd "$src" | awk '/=>/ { print $3 }')
for lib in $libs; do
    cp -L "$lib" "$tmp_dir/libs" || exit 1
done

# Create a tar archive of the executable and libraries
#tar czf "$tmp_dir/archive.tar.gz" -C "$tmp_dir" bin libs || exit 1
# Create a tar archive of the executable and libraries
if ! tar czf "$tmp_dir/archive.tar.gz" -C "$tmp_dir" bin libs; then
    echo "Extraction failed" >&2
    exit 1
fi

# Create a self-extracting script
cat > "$dst" << 'SCRIPT'
#!/bin/sh
TMPDIR="/tmp/pelfbundle_$(date '+%s%M%S')_$RANDOM"
trap 'rm -rf "$TMPDIR"' EXIT

# Find the start position of the archive
ARCHIVE_MARKER=$(awk '/^__ARCHIVE_MARKER__/ { print NR + 1; exit }' "$0")

# Decode the base64-encoded archive and extract it
mkdir -p "$TMPDIR" && tail -n +$ARCHIVE_MARKER "$0" | base64 -d | tar xz -C "$TMPDIR" || {
    echo "Extraction failed" >&2
    exit 1
}

# Get the extracted binary name
EXE_NAME=$(basename "$0" .blob)

# Function to check if a library is found in system paths
is_library_in_system() {
    local library=$1
    if ls /usr/lib/"$library" >/dev/null 2>&1 || ls /lib/"$library" 
>/dev/null 2>&1; then
        return 0 # Library found in system
    else
        return 1 # Library not found in system
    fi
}

# Check if USE_SYSTEM_LIBRARIES is set to 1 or doesn't exist
if [ "${USE_SYSTEM_LIBRARIES:-0}" -eq 1 ]; then
    for lib_file in "$TMPDIR/libs/"*; do
        lib_name=$(basename "$lib_file")

        if is_library_in_system "$lib_name"; then
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name found in system. Using the system's 
library."
            fi
            rm "$lib_file"
        else
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name not found in system. Using the bundl
ed library."
            fi
        fi
    done 2>/dev/null
fi

# Execute the binary with extracted libraries using LD_LIBRARY_PATH
PREFIX="$TMPDIR" PATH="TMPDIR/bin:$PATH" LD_LIBRARY_PATH="$TMPDIR/libs" "$TMPDIR/bin/$EXE_NAME" "$@" || exit 1
exit $?
__ARCHIVE_MARKER__
SCRIPT

# Append the base64-encoded archive to the self-extracting script
base64 "$tmp_dir/archive.tar.gz" >> "$dst" || exit 1

# Make the self-extracting script executable
chmod +x "$dst" || exit 1
