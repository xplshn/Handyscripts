#!/bin/sh

# IDGAFPL License
LICENSE="\
(C) 2016 My2ndAngelic. (Author of the LICENSE)

I don't give a fuck about how this will be used. Everything will be 
allowed, including changing the name, citing wrongly, claiming owner
ship and destroying the computer. You are allowed to do anything wit
h this as long as:

0. I don't give a fuck.
1. You agree that you don't give a fuck.
2. You agree that your use of this will have nothing to fuck with me
 now and in the future.
3. You don't fuck me legally/illegally.

As long as you agree with these terms, you are free to do fucking an
ything, whether legal or not legal in your country, because I don't 
give a fuck. If you don't agree with my terms, fuck off.

Author of the program: chatGPT(lead developer) & xplshn(main cuck)
"

# Check if the required arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <ELF_SRC_PATH> <DST_PATH.blob> [--add-library <LIB_PATH>] [--add-binary <BIN_PATH>]" >&2
    exit 1
fi

# Create a temporary directory for bundling the files
tmp_dir="/tmp/pelf_$(date '+%s%M%S')_$RANDOM"
mkdir -p "$tmp_dir/bin" "$tmp_dir/libs" || exit 1
trap 'rm -rf "$tmp_dir"' EXIT

src="$1"
dst="$2"

# Function to figure out what libraries the binaries need/depend on.
add_thelibs() {
# Copy the libraries from the executable to the temporary directory
libs=$(ldd "$1" | awk '/=>/ { print $3 }')
for lib in $libs; do
    cp -L "$lib" "$tmp_dir/libs" || exit 1
done
}

# Add the libraries of the 1st binary to the soon-to-be bundle.
add_thelibs "$1"

# Function to handle adding libraries
add_library() {
    lib="$1"
    cp -L "$lib" "$tmp_dir/libs" || exit 1
}

# Function to handle adding binaries
add_binary() {
    binary="$1"
    add_thelibs "$binary"
    cp -L "$binary" "$tmp_dir/bin/$(basename "$binary")" || exit 1
}

add_arbitrary() {
    cp -LR "$1" "$tmp_dir" || { echo "Failed to copy arbitrary files"; exit 1; }
}

shift 2 # To access --(add)itional arguments

# Process the optional arguments --add-library, --add-binary, and --add-arbitrary
while [ "$#" -gt 0 ]; do
    case "$1" in
        --add-library)
            add_library "$2"
            shift 2
            ;;
        --add-binary)
            add_binary "$2"
            shift 2
            ;;
        --add-arbitrary)
            add_arbitrary "$2"
            shift 2
            ;;
        *)
            echo "Invalid argument: $1" >&2
            exit 1
            ;;
    esac
done

# Copy the executable to the temporary directory
cp -L "$src" "$tmp_dir/bin" || exit 1

# Create a tar archive of the executable, libraries and additional files.
if ! tar czf "$tmp_dir/archive.tar.gz" -C "$tmp_dir" .; then
    echo "Extraction failed" >&2
    exit 1
fi

# Create a self-extracting script
cat > "$dst" << 'SCRIPT'
#!/bin/sh
# Get the binary's name
EXE_NAME=$(basename "$0" .blob)
TMPDIR="/tmp/pelfbundle_$EXE_NAME$(date '+%s%M%S')_$RANDOM"
LIBS_BULKDIR="/tmp/pelfbundle_libs-bulkdir"
trap 'rm -rf "$TMPDIR" "$REM_AFTERUSE"' EXIT
# Find the start position of the archive
ARCHIVE_MARKER=$(awk '/^__ARCHIVE_MARKER__/ { print NR + 1; exit }' "$0")

# Decode the base64-encoded archive and extract it
mkdir -p "$TMPDIR" && tail -n +$ARCHIVE_MARKER "$0" | base64 -d | tar xz -C "$TMPDIR" || {
    echo "Extraction failed" >&2
    exit 1
}

# Function to check if a library is found in system paths
is_library_in_system() {
    local library=$1
    if [ -e "/usr/lib/$library" ] || [ -e "/lib/$library" ] || [ -e "/lib64/$library" ]; then
        return 0 # Library found in system
    else
        return 1 # Library not found in system
    fi
}

# Check if USE_SYSTEM_LIBRARIES is set to 1 or doesn't exist
if [ "${USE_SYSTEM_LIBRARIES:-0}" -eq 1 ]; then
    for lib_file in "$TMPDIR/libs/"*; do
        lib_name=$(basename "$lib_file")

        if is_library_in_system "$lib_name"; then
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name found in system. Using the system's
library."
            fi
            rm "$lib_file"
        else
            if [ "$SHOW_DISCARDPROCESS" -eq 1 ]; then
                echo "$lib_name not found in system. Using the bundl
ed library."
            fi
        fi
    done 2>/dev/null
fi

mv_u() {
  SRC_DIR="$1"
  DEST_DIR="$2"

  # Loop through each file in the source directory
  for file in "$SRC_DIR"/*; do
    # Check if the file is a regular file
    [ -f "$file" ] || continue
    # Extract the filename from the path
    filename=$(basename "$file")
    # Check if the file does not exist in the destination directory or is newer
    if [ ! -e "$DEST_DIR/$file" ]; then
      REM_AFTERUSE="$REM_AFTERUSE $DEST_DIR/$filename "
      mv "$file" "$DEST_DIR/"
    elif [ "$file" -nt "$DEST_DIR/$filename" ]; then
      # Move the file to the destination directory
      mv "$file" "$DEST_DIR/"
    fi
  done
}

# Add extra binaries to the PATH, if they are there.
if [ "$(ls -1 "$TMPDIR"/bin | wc -l)" -gt 1 ]; then
   xPATH="$TMPDIR/bin:$PATH"
fi

# Execute the binary with extracted libraries using LD_LIBRARY_PATH
if [ "${USE_BULKLIBS:-0}" -eq 1 ]; then
   mkdir -p "$LIBS_BULKDIR"
   mv_u "$TMPDIR/libs" "$LIBS_BULKDIR"
   PATH="$PATH:$xPATH" LD_LIBRARY_PATH="$LIBS_BULKDIR" PREFIX="$TMPDIR" "$TMPDIR/bin/$EXE_NAME" "$@" || exit 1
else
   PATH="$PATH:$xPATH" LD_LIBRARY_PATH="$TMPDIR/libs" PREFIX="$TMPDIR" "$TMPDIR/bin/$EXE_NAME" "$@" || exit 1
fi

exit $?
__ARCHIVE_MARKER__
SCRIPT

# Append the base64-encoded archive to the self-extracting script
base64 "$tmp_dir/archive.tar.gz" >> "$dst" || exit 1

# Make the self-extracting script executable
chmod +x "$dst" || exit 1
