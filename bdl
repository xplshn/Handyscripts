#!/bin/sh
# Not POSIX. See shellcheck's output. Please make an ISSUE in xplshn/Handyscript if you know how to fix those issues in a sane way. It does work with KSH93, ASH and DASH it seems.

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Directories, files, etc. NOTE: Not consistent. TODO: Enhance readability, simplify variables.
INSTALL_DIR="$HOME/.local/share/bin"
TEMP_DIR="/tmp"
CACHE_FILE="/tmp/bdl_install-less_bins_cached"
SYSTEM_ARCH="$(uname -m)"

# Display a spinner loader with default colors
spinner() {
    [ -z "$COOLSPINNER" ] && COOLSPINNER='|/~\'
    [ -z "$COOLSPINNER_COLOR" ] && COOLSPINNER_COLOR='\033[0m'
    [ -z "$COOLSPINNER_DELAY" ] && COOLSPINNER_DELAY=0.1

    len=$(printf "%s" "$COOLSPINNER" | wc -c | awk '{print $1}')
    trap 'printf "\033[?25h"; exit' INT

    while true; do
        i=1
        while [ "$i" -le "$len" ]; do
            char=$(printf "%s" "$COOLSPINNER" | cut -c "$i")
            if [ -n "$COOLSPINNER_COLOR" ]; then
                printf "%b%s%b" "$COOLSPINNER_COLOR" "$char" "\033[0m"
            else
                printf "%s" "$char"
            fi
            sleep "$COOLSPINNER_DELAY"
            printf "\b"
            i=$((i + 1))
        done
    done
}

# Function to display colored output
print_color() {
    printf "%b%s%b\\n" "$1" "$2" "$NC"
}

fetch_binary() {
    PACKAGE_NAME="$1"
    INSTALL_DIR="$2"
    destination="${3:-$PACKAGE_NAME}" # Default destination

    source_url=$(find_url "$PACKAGE_NAME")

    if [ -z "$source_url" ]; then
        print_color "$YELLOW" "Source URL not found for '$PACKAGE_NAME'."
        return 1
    fi

    mkdir -p "$INSTALL_DIR"  # Ensure the directory exists

    # Start spinner in the background
    spinner & spinner_pid=$!

    if wget -O "$INSTALL_DIR/$destination" "$source_url" && chmod +x "$INSTALL_DIR/$destination"; then
        # Kill the spinner after download completes
        kill "$spinner_pid" >/dev/null 2>&1
        # Move the cursor to the beginning of the line and clear the line
        printf "\033[2K\r"
        print_color "$GREEN" "Fetched binary successfully."
        return 0
    else
        # Kill the spinner if download fails
        kill "$spinner_pid" >/dev/null 2>&1
        # Move the cursor to the beginning of the line and clear the line
        printf "\033[2K\r"
        print_color "$YELLOW" "Failed to fetch binary."
        return 1
    fi
}

# Function to fetch a package and run or cache it
fetch_and_run() {
    PACKAGE_NAME="$1"
    INSTALL_DIR="/tmp" # Change this to your preferred installation directory
    cache_file="/tmp/bdl_install-less_bins_cached"
    tmp_destination="bdl_$PACKAGE_NAME-$(date +'%s')"

    if [ -f "$cache_file" ] && grep -q "^$PACKAGE_NAME " "$cache_file"; then
        cached_location=$(awk -v pname="$PACKAGE_NAME" '$1 == pname { print $2 }' "$cache_file")
        if [ -n "$cached_location" ] && [ -x "$INSTALL_DIR/$cached_location" ]; then
            print_color "$GREEN" "Running '$PACKAGE_NAME' from cache..."
            "$INSTALL_DIR/$cached_location" "${@:2}" # Pass additional parameters as flags
            return 0
        fi
    fi

    if fetch_binary "$PACKAGE_NAME" "$INSTALL_DIR" "$tmp_destination"; then
        echo "$PACKAGE_NAME $tmp_destination" >> "$cache_file"
        clean_cache
        "$INSTALL_DIR/$tmp_destination" "${@:2}" # Pass additional parameters as flags
        return 0
    else
        print_color "$YELLOW" "Failed to fetch binary '$PACKAGE_NAME'."
        return 1
    fi
}

# Function to clean the cache (limit 40 programs)
clean_cache() {
    cache_file="/tmp/bdl_install-less_bins_cached"

    if [ -f "$cache_file" ]; then
        lines=$(wc -l < "$cache_file")
        if [ "$lines" -gt 40 ]; then
            sed -i '1,40d' "$cache_file"
        fi
    fi
}

# Function to install a package using eget
install_package() {
    PACKAGE_NAME="$1"
    if [ ! -f "$INSTALL_DIR/$PACKAGE_NAME" ]; then
        fetch_binary "$PACKAGE_NAME" "$INSTALL_DIR" && print_color "$GREEN" "OK: $INSTALL_DIR/$PACKAGE_NAME"
    else
        print_color "$YELLOW" "The requested binary is already at: $INSTALL_DIR/$PACKAGE_NAME. Will not perform an install."
    fi
}

# Function to retrieve package source URL
find_url() {
    PACKAGE_NAME="$1"
    METADATA_URL="https://raw.githubusercontent.com/metis-os/hysp-pkgs/main/data/metadata.json"

    SOURCE_URL=$(curl -s "$METADATA_URL" | jq -r --arg pname "$PACKAGE_NAME" --arg sysarch "$SYSTEM_ARCH" \
        '.packages[] | select(.name == $pname and .architecture == $sysarch) | .source')

    # Check if source URL is empty
    if [ -z "$SOURCE_URL" ]; then
        LIST_PACKAGES_RESULT=$(list_packages | grep "^$PACKAGE_NAME$")
        if [ -n "$LIST_PACKAGES_RESULT" ]; then
            SOURCE_URL="https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH/$PACKAGE_NAME"
        fi
    fi

    # Check if the SOURCE_URL returns 404
    if [ -n "$SOURCE_URL" ]; then
        if ! curl --output /dev/null --silent --head --fail "$SOURCE_URL"; then
            SOURCE_URL="https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/baseutils/$SYSTEM_ARCH/$PACKAGE_NAME"
        fi
    fi

    printf '%s\n' "$SOURCE_URL"
}

# Function to show detailed package information with color
show_package_info() {
    PACKAGE_NAME="$1"
    METADATA_URL="https://raw.githubusercontent.com/metis-os/hysp-pkgs/main/data/metadata.json"

    # Start spinner in the background & capture its PID.
    spinner & spinner_pid=$!

    PACKAGE_INFO=$(curl -s "$METADATA_URL" | jq --arg pname "$PACKAGE_NAME" --arg sysarch "$SYSTEM_ARCH" \
        '.packages[] | select(.name == $pname and .architecture == $sysarch) | {description, name, version, updated, size, sha, source}')

    if [ -z "$PACKAGE_INFO" ]; then
        # Kill the spinner if download fails
        kill "$spinner_pid" >/dev/null 2>&1
        # Move the cursor to the beginning of the line and clear the line
        printf "\033[2K\r"
        # Print error.
        print_color "$YELLOW" "Package '$PACKAGE_NAME' not found."
    else
        # Kill the spinner if download fails
        kill "$spinner_pid" >/dev/null 2>&1
        # Move the cursor to the beginning of the line and clear the line
        printf "\033[2K\r"
        # SUCCESS: Print info in JSON.
        print_color "$GREEN" "$PACKAGE_INFO"
    fi
}

# Function to remove an installed package
remove_package() {
    PACKAGE_NAME="$1"
    PACKAGE_LOCATION="$INSTALL_DIR/$PACKAGE_NAME"

    if [ -f "$PACKAGE_LOCATION" ]; then
        rm "$PACKAGE_LOCATION" && print_color "$GREEN" "Package '$PACKAGE_NAME' removed."
    else
        print_color "$YELLOW" "Package '$PACKAGE_NAME' is not installed."
    fi
}

# Function to list all possible packages
list_packages() {
    spinner & spinner_pid=$!

    packages=$( {
        curl -qfsSL "https://api.github.com/repos/Azathothas/Toolpacks/contents/$SYSTEM_ARCH/" && curl -qfsSL "https://api.github.com/repos/Azathothas/Static-Binaries/contents/baseutils/$SYSTEM_ARCH"
    } | jq -r '.[].name' | sort | uniq | awk '!/^[[:upper:]]+$|^.*\..*$|^BLAKE3SUM$|^SHA256SUM$/{print}')
    kill "$spinner_pid" >/dev/null 2>&1
    printf "\033[2K\r%s\n" "$packages"
}

bootstrap() {
    fetch_wget_binary() {
        PACKAGE_NAME="$1"
        destination="$TEMP_DIR/bdl_bootstrap/$PACKAGE_NAME"
        TOOLPACK="https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH"
        BASEU="https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/baseutils/$SYSTEM_ARCH"
        mkdir -p "$TEMP_DIR/bdl_bootstrap"
        if [ -f "$destination" ]; then
            chmod +x "$destination" &&
            export PATH="/tmp/bdl_bootstrap:$PATH" ||
            printf "Failed to fetch %s.\n" "$PACKAGE_NAME"
        else
            [ -n "$BASE" ] && source_url="$BASEU" || source_url="$TOOLPACK"
            wget -O "$destination" "$source_url/$PACKAGE_NAME" &&
            chmod +x "$destination" &&
            export PATH="/tmp/bdl_bootstrap:$PATH" ||
            printf "Failed to fetch %s.\n" "$PACKAGE_NAME"
        fi
    }

    if ! command -v curl >/dev/null 2>&1; then
        printf "curl is not installed. Bootstrapping...\n"
        BASE="true" fetch_wget_binary "curl"
    fi

    if ! command -v jq >/dev/null 2>&1; then
        printf "jq is not installed. Bootstrapping...\n"
        fetch_wget_binary "jq"
    fi

    if ! command -v awk >/dev/null 2>&1; then
        printf "awk is not installed. Bootstrapping...\n"
        BASE="true" fetch_wget_binary "awk"
    fi

    if ! command -v curl >/dev/null 2>&1 || ! command -v awk >/dev/null 2>&1 || ! command -v jq >/dev/null 2>&1; then
        printf "Please install the missing packages to avoid bootstrapping in the future. Add them to your PATH.\n"
    fi
}

# Main script
bootstrap

case $1 in
    run)
        fetch_and_run "$2" "${@:3}"
        ;;
    install)
        install_package "$2"
        ;;
    info)
        show_package_info "$2"
        ;;
    remove)
        remove_package "$2"
        ;;
    list)
        list_packages
        ;;
    tldr)
        fetch_and_run tldr "${@:2}"
        ;;
    *)
        printf "Usage: %s {run|install|info|remove|list|tldr} <PACKAGE_NAME> \n" "$0"
        exit 1
        ;;
esac

exit 0
