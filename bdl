#!/bin/bash
# NOT POSIX, AT ALL. TODO: Make this not suck. Create a bash fork that does not have any of the BASH exclusive "features" and is 100% POSIX and ISO C.

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Directories, files, etc. NOTE: Not consistent. TODO: Enhance readability, simplify variables.
INSTALL_DIR=${HOME}/.local/bin
TEMP_DIR=/tmp
CACHE_FILE=${TMPDIR:-${TEMP_DIR}}/bdl_install-less_bins_cached
SYSTEM_ARCH=$(uname -m)

# Display a spinner loader with default colors
spinner() {
    if [ -z "$COOLSPINNER" ]; then
        COOLSPINNER='|/~\\'
    fi

    if [ -z "$COOLSPINNER_COLOR" ]; then
        COOLSPINNER_COLOR='\033[0m'
    fi

    if [ -z "$COOLSPINNER_DELAY" ]; then
        COOLSPINNER_DELAY=0.1
    fi

    len=$(printf "%s" "$COOLSPINNER" | wc -c | awk '{print $1}')
    trap 'printf "\033[?25h"; exit' INT

    while true; do
        i=1
        while [ "$i" -le "$len" ]; do
            char=$(printf "%s" "$COOLSPINNER" | cut -c "$i")
            if [ -n "$COOLSPINNER_COLOR" ]; then
                printf "%b%s%b" "$COOLSPINNER_COLOR" "$char" "\033[0m"
            else
                printf "%s" "$char"
            fi
            sleep "$COOLSPINNER_DELAY"
            printf "\b"
            i=$((i + 1))
        done
    done
}

# Function to display colored output
print_color() {
    printf "%b%s%b\\n" "$1" "$2" "$NC"
}

# Define a helper function to determine which fetcher tool (curl or wget) should be used for bootstrapping
determine_fetcher() {
    if command -v wget >/dev/null 2>&1; then
        FETCHER="wget"
        FETCHER_TO_BOOTSTRAP="curl"
    elif command -v curl >/dev/null 2>&1; then
        FETCHER="curl"
        FETCHER_TO_BOOTSTRAP="wget"
    else
        printf "Neither curl nor wget found. Cannot proceed with bootstrapping.\n"
        return 1
    fi
    bootstrap
}

fetch_binary() {
    PACKAGE_NAME="$1"
    INSTALL_DIR="$2"
    DESTINATION="${3:-$INSTALL_DIR/$PACKAGE_NAME}"
    TOOLPACK="https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH"
    BASEU="https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/baseutils/$SYSTEM_ARCH"

    mkdir -p "$INSTALL_DIR"

    SOURCE_URL=$(find_url "$PACKAGE_NAME")

    if [ -z "$SOURCE_URL" ]; then
        print_color "$YELLOW" "Source URL not found for '$PACKAGE_NAME'."
        return 1
    fi

    COOLSPINNER_COLOR='\033[92m'
    spinner & spinner_pid=$!

    if [ "$FETCHER" = "curl" ]; then
        if ! "$FETCHER" -o "$DESTINATION" "$SOURCE_URL" >/dev/null 2>&1; then
            kill "$spinner_pid" >/dev/null 2>&1  # Stop the spinner
            printf "\033[2K\r"  # Clear the spinner character
            print_color "$YELLOW" "Failed to fetch $PACKAGE_NAME."
            return 1
        fi
        chmod +x "$DESTINATION" &&
        kill "$spinner_pid" >/dev/null 2>&1  # Stop the spinner
        printf "\033[2K\r"  # Clear the spinner character
        print_color "$GREEN" "Fetched binary successfully."
    else
        if ! "$FETCHER" -O "$DESTINATION" "$SOURCE_URL" >/dev/null 2>&1; then
            kill "$spinner_pid" >/dev/null 2>&1  # Stop the spinner
            printf "\033[2K\r"  # Clear the spinner character
            print_color "$YELLOW" "Failed to fetch $PACKAGE_NAME."
            return 1
        fi
        chmod +x "$DESTINATION" &&
        kill "$spinner_pid" >/dev/null 2>&1  # Stop the spinner
        printf "\033[2K\r"  # Clear the spinner character
        print_color "$GREEN" "Fetched binary successfully."
    fi
}

# Function to retrieve cached file location
return_cached_file() {
    PACKAGE_NAME="$1"

    if [ -f "$CACHE_FILE" ] && grep -q "^$PACKAGE_NAME " "$CACHE_FILE"; then
        CACHED_LOCATION=$(grep -E "^$PACKAGE_NAME " "$CACHE_FILE" | awk '{ print $2 }')
        if [ -n "$CACHED_LOCATION" ]; then
            printf "%s\n" "$CACHED_LOCATION"
            return 0
        fi
    fi

    return 1
}

# Function to clean the cache (limit 40 programs)
clean_cache() {
    if [ -f "$CACHE_FILE" ]; then
        # Remove duplicate entries in the cache
        awk '!seen[$0]++' "$CACHE_FILE" > temp.txt
        mv temp.txt "$CACHE_FILE"

        # Remove non-existent files from the cache
        while read -r line; do
            cached_package=$(echo "$line" | awk '{print $1}')
            cached_file=$(echo "$line" | awk '{print $2}')
            if [ ! -f "$TEMP_DIR/$cached_file" ] || [ "$cached_package" != "$(echo "$cached_file" | cut -d'-' -f 1 | cut -d'_' -f 2-)" ]; then
                sed -i "/$cached_file/d" "$CACHE_FILE"
            fi
        done < "$CACHE_FILE"
    fi
}

# Function to run from cache or fetch if not found
run_from_cache() {
    PACKAGE_NAME="$1"
    CACHED_LOCATION=$(return_cached_file "$PACKAGE_NAME")

    if [ -n "$CACHED_LOCATION" ] && [ -x "$TEMP_DIR/$CACHED_LOCATION" ]; then
        printf "%bRunning '%s' from cache...%b\n" "$GREEN" "$PACKAGE_NAME" "$NC"
        clean_cache
        "$TEMP_DIR/$CACHED_LOCATION" "${@:2}" # Pass additional parameters as flags
        return 0
    else
        NEW_CACHED_LOCATION="bdl_$PACKAGE_NAME-$(date +'%s')"
        if fetch_binary "$PACKAGE_NAME" "$TEMP_DIR" "$TEMP_DIR/$NEW_CACHED_LOCATION"; then
            echo "$PACKAGE_NAME $NEW_CACHED_LOCATION" >> "$CACHE_FILE" # Update cache with the fetched binary
            clean_cache # Clean the cache
            "$TEMP_DIR/$NEW_CACHED_LOCATION" "${@:2}" # Execute the fetched binary
            return 0
        else
            return 1
        fi
    fi
}

install_binary() {
    PACKAGE_NAME="$1"
    TEMP_DIR="/tmp" # Change this to your preferred installation directory

    # Check if the package name is empty
    if [ -z "$PACKAGE_NAME" ]; then
        print_color "$YELLOW" "No package name provided."
        return
    fi

    # Check if the binary is already installed in the INSTALL_DIR
    if [ -f "$INSTALL_DIR/$PACKAGE_NAME" ]; then
        print_color "$YELLOW" "The requested binary is already at: $INSTALL_DIR/$PACKAGE_NAME. Will not perform an install."
        return
    fi

    # Get the cached location of the package
    CACHED_LOCATION=$(return_cached_file "$PACKAGE_NAME")

    if [ -n "$CACHED_LOCATION" ] && [ -x "$TEMP_DIR/$CACHED_LOCATION" ]; then
        print_color "$GREEN" "Installing '$PACKAGE_NAME' from cache..."
        mv "$TEMP_DIR/$CACHED_LOCATION" "$INSTALL_DIR/$PACKAGE_NAME"
        clean_cache # Remove duplicates and non-existent files from the cache
        return
    fi

    # Fetch the binary if it's not found in the installation directory or cache
    fetch_binary "$PACKAGE_NAME" "$INSTALL_DIR" && print_color "$GREEN" "OK: $INSTALL_DIR/$PACKAGE_NAME"
    clean_cache # Remove duplicates and non-existent files from the cache
}

# Function to remove an installed package
remove_package() {
    PACKAGE_NAME="$1"
    PACKAGE_LOCATION="$INSTALL_DIR/$PACKAGE_NAME"

    if [ -f "$PACKAGE_LOCATION" ]; then
        rm "$PACKAGE_LOCATION" && print_color "$GREEN" "Package '$PACKAGE_NAME' removed."
    else
        print_color "$YELLOW" "Package '$PACKAGE_NAME' is not installed."
    fi
}

# Function to retrieve package source URL
find_url() {
    PACKAGE_NAME="$1"
    METADATA_URL="https://raw.githubusercontent.com/metis-os/hysp-pkgs/main/data/metadata.json"

    if [ -n "$NO_METADATA" ]; then
        if [ -n "$BASE" ]; then
            printf "https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/baseutils/$SYSTEM_ARCH/$PACKAGE_NAME\n"
        else
            printf "https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH/$PACKAGE_NAME\n"
        fi
        return
    fi

    SOURCE_URL=$(curl -s "$METADATA_URL" | jq -r --arg pname "$PACKAGE_NAME" --arg sysarch "$SYSTEM_ARCH" \
        '.packages[] | select(.name == $pname and .architecture == $sysarch) | .source')

    # Check if source URL is empty
    if [ -z "$SOURCE_URL" ]; then
        LIST_PACKAGES_RESULT=$(list_packages | grep "^$PACKAGE_NAME$")
        if [ -n "$LIST_PACKAGES_RESULT" ]; then
            SOURCE_URL="https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH/$PACKAGE_NAME"
        else
            SOURCE_URL="https://raw.githubusercontent.com/Azathothas/Toolpacks/main/$SYSTEM_ARCH/$PACKAGE_NAME"
        fi
    fi

    # Check if the SOURCE_URL returns 404
    if [ -n "$SOURCE_URL" ]; then
        if ! curl --output /dev/null --silent --head --fail "$SOURCE_URL"; then
            SOURCE_URL="https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/baseutils/$SYSTEM_ARCH/$PACKAGE_NAME"
        fi
    fi

    printf '%s\n' "$SOURCE_URL"
}

# Function to show detailed package information with color
show_package_info() {
    PACKAGE_NAME="$1"
    METADATA_URL="https://raw.githubusercontent.com/metis-os/hysp-pkgs/main/data/metadata.json"

    # Start spinner in the background & capture its PID.
    spinner & spinner_pid=$!

    PACKAGE_INFO=$(curl -s "$METADATA_URL" | jq --arg pname "$PACKAGE_NAME" --arg sysarch "$SYSTEM_ARCH" \
        '.packages[] | select(.name == $pname and .architecture == $sysarch) | {description, name, version, updated, size, sha, source}')

    if [ -z "$PACKAGE_INFO" ]; then
        # Kill the spinner if download fails
        kill "$spinner_pid" >/dev/null 2>&1

        # Clear the line
        printf "\033[2K\r"

        # Print error.
        print_color "$YELLOW" "Package '$PACKAGE_NAME' not found."
    else
        # Kill the spinner if download succeeds
        kill "$spinner_pid" >/dev/null 2>&1

        # Clear the line
        printf "\033[2K\r"

        # SUCCESS: Print info in JSON.
        print_color "$GREEN" "$PACKAGE_INFO"
    fi
}

fSearch() {
  SEARCH_TERM="$1"
  METADATA_URL="https://raw.githubusercontent.com/metis-os/hysp-pkgs/main/data/metadata.json"

  # Fetch metadata
  METADATA=$(curl -s "$METADATA_URL")

  # Check if metadata retrieval failed
  if [ -z "$METADATA" ]; then
    printf "Failed to fetch package information.\n"
    return 1
  fi

  # Filter packages based on the search term
  SEARCH_RESULTS=$(printf '%s\n' "$METADATA" | jq -r --arg sterm "$SEARCH_TERM" \
    '.packages[] | select(.name + .description | test($sterm; "i")) | "\(.name) - \(.description)"' | sort -u)

  # Check if no matching packages found
  if [ -z "$SEARCH_RESULTS" ]; then
    printf "No matching packages found for '%s'.\n" "$SEARCH_TERM"
    return 0
  fi

  # Determine the truncation length
  TRUNC_LENGTH=$(($(tput cols) - 3))

  # Check if the package binary exists in the INSTALL_DIR and print results with installation state indicators
  printf '%s\n' "$SEARCH_RESULTS" | while IFS= read -r line; do
    NAME=$(echo "$line" | awk -F ' - ' '{print $1}')
    DESCRIPTION=$(echo "$line" | awk -F ' - ' '{$1=""; print substr($0,2)}')
    CACHED_LOCATION=$(return_cached_file "$NAME")
    if [ -f "$INSTALL_DIR/$NAME" ]; then
      PREFIX="[i]"
    elif [ -n "$CACHED_LOCATION" ] && [ -x "$TEMP_DIR/$CACHED_LOCATION" ]; then
      PREFIX="[c]"
    else
      PREFIX="[-]"
    fi

    # Truncate the description if it exceeds the truncation length
    if [ ${#DESCRIPTION} -gt "$TRUNC_LENGTH" ]; then
      DESCRIPTION=$(printf '%s' "$DESCRIPTION" | cut -c 1-"$TRUNC_LENGTH")
      DESCRIPTION="${DESCRIPTION}..."
    fi

    printf "%s %s - %s\n" "$PREFIX" "$NAME" "$DESCRIPTION"
  done
}

# Function to list all possible packages
list_packages() {
    spinner & spinner_pid=$!
    packages=$(
        {
            curl -qfsSL "https://api.github.com/repos/Azathothas/Toolpacks/contents/$SYSTEM_ARCH/" && \
            curl -qfsSL "https://api.github.com/repos/Azathothas/Static-Binaries/contents/baseutils/$SYSTEM_ARCH"
        } | jq -r '.[].name' | sort | uniq | awk '!/^[[:upper:]]+$|^.*\..*$|^BLAKE3SUM$|^SHA256SUM$/{print}')
    kill "$spinner_pid" >/dev/null 2>&1
    printf "\033[2K\r%s\n" "$packages"
}

bootstrap() {
    mkdir -p "$TEMP_DIR/bdl_bootstrap"
    export PATH="$TEMP_DIR/bdl_bootstrap:$PATH"
    if [ -n "$FETCHER" ]; then
        export NO_METADATA=1
        if ! command -v curl >/dev/null 2>&1; then
            print_color "${YELLOW}" "$FETCHER_TO_BOOTSTRAP" "is not installed. Bootstrapping..."
            fetch_binary "$FETCHER_TO_BOOTSTRAP" "$TEMP_DIR/bdl_bootstrap"
        fi

        if ! command -v jq >/dev/null 2>&1; then
            print_color "${YELLOW}" "jq is not installed. Bootstrapping..."
            fetch_binary "jq" "$TEMP_DIR/bdl_bootstrap"
        fi

        if ! command -v awk >/dev/null 2>&1; then
            print_color "${YELLOW}" "awk is not installed. Bootstrapping..."
            BASE="true" fetch_binary "awk" "$TEMP_DIR/bdl_bootstrap"
        fi

        if ! command -v tput >/dev/null 2>&1; then
            print_color "${YELLOW}" "tput is not installed. Bootstrapping..."
            BASE="true" fetch_binary "tput" "$TEMP_DIR/bdl_bootstrap"
        fi

        #if ! command -v bash >/dev/null 2>&1; then
        #    print_color "${YELLOW}" "bash is not installed. Bootstrapping..."
        #    BASE="true" fetch_binary "bash" "$TEMP_DIR/bdl_bootstrap"
        #fi
        unset NO_METADATA
    fi
}

determine_fetcher
case $1 in
    run)
        run_from_cache "$2" "${@:3}"
        ;;
    install)
        install_binary "$2"
        ;;
    remove)
        remove_package "$2"
        ;;
    search)
        fSearch "$2"
        ;;
    info)
        show_package_info "$2"
        ;;
    list)
        list_packages
        ;;
    tldr)
        run_from_cache tldr "${@:2}"
        ;;
    *)
        printf 'Usage: %s {run|install|remove|search|info|list|tldr} <PACKAGE_NAME>\n' "$0"
        exit 1
        ;;
esac

exit 0
