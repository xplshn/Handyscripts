#!/bin/sh

# The script might have been run before, disable the previous alias
unalias seedocs_ttts 2>/dev/null

# Define API URL and voice
API_URL="https://tiktok-tts.weilnet.workers.dev/api/generation"
TEXT="$1"
VOICE="en_us_009"

# Check number of arguments
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
    echo "Usage: $0 \"your text here\" [voice]"
    exit 1
fi

# Assign second argument to VOICE if it exists
if [ $# -eq 2 ]; then
  VOICE="$2"
fi

# Check if the cache file exists and create it if not
CACHE_DIR=${TMPDIR:-/tmp}
CACHE_FILE="$CACHE_DIR/ttts_cache"
if [ ! -f "$CACHE_FILE" ]; then
    touch "$CACHE_FILE"
    chmod 600 "$CACHE_FILE"
fi

# Check if the audio is already cached
cached_audio=$(grep -E "^$TEXT;$VOICE;" "$CACHE_FILE" | awk -F';' '{print $3}')

if [ -n "$cached_audio" ]; then
    echo "Audio for '$TEXT' with voice '$VOICE' found in cache."

    # Decode and play the cached audio data using available command
    temp_cached_audio="$CACHE_DIR/ttts_cached_audio_$$$$.mp3"
    echo "$cached_audio" | base64 -d > "$temp_cached_audio"
    if [ $(which mpg123) ]; then
        mpg123 "$temp_cached_audio"
    elif [ $(which play) ]; then
        play -t mp3 "$temp_cached_audio"
    elif [ $(which termux-media-player) ]; then
        termux-media-player play "$temp_cached_audio"
    elif [ $(which audioplay) ]; then
        audioplay "$temp_cached_audio"
    else
        echo "Please install 'mpg123', 'sox', or modify the script's commands to use a player of your choice to play audio."
    fi
    rm -f "$temp_cached_audio"
    exit 0
fi

# Perform the API request to get audio data
response=$(curl -sS -X POST \
    -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/119.0' \
    -H 'Accept: */*' \
    -H 'Accept-Language: en-US,en;q=0.5' \
    -H 'Referer: https://www.text-to-speech.app/' \
    -H 'Content-Type: application/json' \
    -H 'Origin: https://www.text-to-speech.app' \
    -H 'DNT: 1' \
    -H 'Connection: keep-alive' \
    -H 'TE: trailers' \
    --data-raw "{\"text\":\"$TEXT\",\"voice\":\"$VOICE\"}" \
    "$API_URL")

# Extract audio data from the API response
audio_data=$(echo "$response" | awk -F'"data":"|",' '{print $2}')

# Check if audio data is available
if [ -n "$audio_data" ] && [ "$audio_data" != "null" ]; then
    temp_audio_file="$CACHE_DIR/ttts_cached-audio_$$$$.mp3"
    echo "Audio data saved to: $temp_audio_file"

    # Decode and play audio data using available command
    echo "$audio_data" | base64 -d > "$temp_audio_file"
    if [ $(which mpg123) ]; then
        mpg123 "$temp_audio_file"
    elif [ $(which play) ]; then
        play -t mp3 "$temp_audio_file"
    elif [ $(which termux-media-player) ]; then
        termux-media-player play "$temp_audio_file"
    else
        echo "Please install 'mpg123', 'sox' to play audio."
    fi

    # Cache the audio information
    echo "$TEXT;$VOICE;$audio_data" >> "$CACHE_FILE"

    # Check if cache has more than 1000 entries, if yes, keep the latest 1000
    cache_size=$(wc -l < "$CACHE_FILE")
    if [ "$cache_size" -gt 1000 ]; then
        tail -n 1000 "$CACHE_FILE" > "$CACHE_FILE.tmp"
        mv "$CACHE_FILE.tmp" "$CACHE_FILE"
    fi
else
    echo "Failed to retrieve audio content from the API. The value of $2 might not be correct, see documentation at https://github.com/xplshn/Handyscripts/blob/main/voices_ttts.md or execute seedocs_ttts in your terminal"
    alias seedocs_ttts="curl -SsL https://raw.githubusercontent.com/xplshn/Handyscripts/main/voices_ttts.md"
fi
