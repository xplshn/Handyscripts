#!/bin/sh

# Make the output of a command dissappear
unnappear() {
    "$@" >/dev/null 2>&1
}

# Display a spinner loader with the colors declared(or not!) in the COOLSPINNERCOLOR variable
spinner() {
    [ -z "$COOLSPINNER" ] && COOLSPINNER='|~/\'
    [ -z "$COOLSPINNER_COLOR" ] && COOLSPINNERCOLOR='\033[0m'
    [ -z "$COOLSPINNER_DELAY" ] && COOLSPINNER_DELAY=0.1
    len=${#COOLSPINNER}
    trap 'printf "\033[?25h"; exit' INT
    while true; do
        i=0
        while [ "$i" -lt "$len" ]; do
            char=$(printf "%s" "$COOLSPINNER" | cut -c "$((i + 1))")
            [ -n "$COOLSPINNERCOLOR" ] && printf "%b%s%b" "$COOLSPINNERCOLOR" "$char" "\033[0m" || printf "%s" "$char"
            sleep "$COOLSPINNER_DELAY"
            printf "\b"
            i=$((i + 1))
        done
    done
}

# Function to check and create cache file if it doesn't exist
initialize_cache() {
    CACHE_DIR=${TMPDIR:-/tmp}
    CACHE_FILE="$CACHE_DIR/ttts_cache"

    if [ ! -f "$CACHE_FILE" ]; then
        touch "$CACHE_FILE"
        chmod 600 "$CACHE_FILE"
    fi
}

# Function to check if audio is cached
check_cached_audio() {
    cached_audio=$(grep -E "^$TEXT;$VOICE;" "$CACHE_FILE" | awk -F';' '{print $3}')
    if [ -n "$cached_audio" ]; then
        printf "Audio for '%s' with voice '%s' found in cache.\n" "$TEXT" "$VOICE"

        # Decode and play cached audio data using available command
        temp_cached_audio="$CACHE_DIR/ttts_cached_audio_$$$$.mp3"
        echo "$cached_audio" | base64 -d > "$temp_cached_audio"
        play_cached_audio "$temp_cached_audio"
        rm -f "$temp_cached_audio"
        exit 0
    else
	fetch_and_cache_audio
    fi
}

# Function to play cached audio
play_cached_audio() {
    # Show spinner while playing audio.
    spinner & spinner_pid=$! 

    if command -v mpg123 >/dev/null 2>&1; then
        unnappear mpg123 "$1"
    elif command -v play >/dev/null 2>&1; then
        unnappear play -t mp3 "$1"
    elif command -v termux-media-player >/dev/null 2>&1; then
        unnappear termux-media-player play "$1"
    elif command -v audioplay >/dev/null 2>&1; then
        unnappear audioplay "$1"
    else
        printf "Please install 'mpg123' or 'sox' to play audio.\n"
    fi

    # Stop spinner once audio playback is finished.
    kill $spinner_pid > /dev/null 2>&1
    printf "\b   \b\b\b"  # Clear spinner output
}

# Function to fetch audio data from API and cache it
fetch_and_cache_audio() {
    spinner $$ &
    response=$(curl -sSL -X POST \
        -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/119.0' \
        -H 'Accept: */*' \
        -H 'Accept-Language: en-US,en;q=0.5' \
        -H 'Referer: https://www.text-to-speech.app/' \
        -H 'Content-Type: application/json' \
        -H 'Origin: https://www.text-to-speech.app' \
        -H 'DNT: 1' \
        -H 'Connection: keep-alive' \
        -H 'TE: trailers' \
        --data-raw "{\"text\":\"$TEXT\",\"voice\":\"$VOICE\"}" \
        "$API_URL")

    audio_data=$(echo "$response" | awk -F'"data":"|",' '{print $2}')
    kill $! > /dev/null 2>&1  # Kill the spinner.
     printf "\b\b\b   \b\b\b" # Clear spinner output.

    if [ -n "$audio_data" ] && [ "$audio_data" != "null" ]; then
        temp_audio_file="$CACHE_DIR/ttts_cached_audio_$$$$.mp3"
        printf "Audio data saved to: %s\n" "$temp_audio_file"

        echo "$audio_data" | base64 -d > "$temp_audio_file"
        play_cached_audio "$temp_audio_file"

        echo "$TEXT;$VOICE;$audio_data" >> "$CACHE_FILE"

        # Keep the latest 1000 entries in the cache
        cache_size=$(wc -l < "$CACHE_FILE")
        if [ "$cache_size" -gt 1000 ]; then
            tail -n 1000 "$CACHE_FILE" > "$CACHE_FILE.tmp"
            mv "$CACHE_FILE.tmp" "$CACHE_FILE"
        fi
    else
        RED='\033[1;31m'        #| Color Red
        GREEN='\033[0;32m'    #| Color Green
        PURPLE='\033[0;35m'   #| Color Purple
        NC='\033[0m'                #| No Color
        printf "${RED}Failed to retrieve audio content from the API.${NC}\n"
        printf "The value of VOICE${RED}($2)${NC} might not be correct\n"
        printf "See documentation at ${PURPLE}https://github.com/xplshn/Handyscripts/blob/main/voices_ttts.md${NC}\n"
        printf "You can also execute: ${GREEN}curl -SsL https://raw.githubusercontent.com/xplshn/Handyscripts/main/voices_ttts.md${NC}\n"
    fi
}

# Main script logic starts here

# Define API URL and voice
API_URL="https://tiktok-tts.weilnet.workers.dev/api/generation"
TEXT="$1"
VOICE="en_us_009"

# Check number of arguments
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
    printf "Usage: %s \"your text here\" [voice]\n" "$0"
    exit 1
fi

# Assign second argument to VOICE if it exists
if [ $# -eq 2 ]; then
    VOICE="$2"
fi

initialize_cache
check_cached_audio
#fetch_and_cache_audio

